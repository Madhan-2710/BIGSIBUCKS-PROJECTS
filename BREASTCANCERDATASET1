import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.datasets import load_breast_cancer
from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import accuracy_score, confusion_matrix, roc_curve, auc
from sklearn.feature_selection import SelectKBest, f_classif
import pandas as pd

# Load breast cancer dataset
data = load_breast_cancer()
X = data.data
y = data.target
feature_names = data.feature_names

# Split data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Initialize K-nearest neighbors classifier
knn = KNeighborsClassifier(n_neighbors=5)

# Train the classifier
knn.fit(X_train, y_train)

# Make predictions
y_pred = knn.predict(X_test)

# Evaluate the model
accuracy = accuracy_score(y_test, y_pred)
print(f"Accuracy: {accuracy:.2f}")

# Plotting different types of visualizations

# 1. Scatter Plot of Data Distribution
plt.figure(figsize=(10, 8))
sns.scatterplot(x=X[:, 0], y=X[:, 1], hue=y, palette='Set1', s=100, alpha=0.8)
plt.title('Scatter Plot of Data Distribution')
plt.xlabel('Feature 1')
plt.ylabel('Feature 2')
plt.legend(title='Target', loc='best', labels=['Class 0', 'Class 1'])
plt.show()

# 2. Box Plot for Feature Comparison
plt.figure(figsize=(10, 8))
sns.boxplot(x=y, y=X[:, 0], palette='Set2')
plt.title('Box Plot of Feature 1 Across Classes')
plt.xlabel('Target')
plt.ylabel('Feature 1')
plt.xticks([0, 1], ['Class 0', 'Class 1'])
plt.show()

# 3. Histograms for Feature Distributions
plt.figure(figsize=(12, 10))
for i in range(X.shape[1]):
    plt.subplot(5, 6, i + 1)
    sns.histplot(X[:, i], bins=30, kde=True)
    plt.title(f'Feature {i + 1}')
    plt.xlabel('Value')
    plt.ylabel('Frequency')
plt.tight_layout()
plt.show()

# 4. Pairplot for Pairwise Relationships
features_subset = np.random.choice(X.shape[1], size=min(6, X.shape[1]), replace=False)
sns.pairplot(pd.DataFrame(X[:, features_subset], columns=feature_names[features_subset]))
plt.suptitle('Pairwise Relationships between Features', y=1.02)
plt.show()

# 5. Correlation Heatmap
plt.figure(figsize=(10, 8))
sns.heatmap(np.corrcoef(X, rowvar=False), cmap='coolwarm', annot=True, fmt=".2f", xticklabels=feature_names, yticklabels=feature_names)
plt.title('Correlation Heatmap of Features')
plt.show()
